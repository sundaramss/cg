<%
	def classRef = modelData.className[0].toLowerCase()+modelData.className[1..-1]
	def directFields = modelData.columns.findAll{!it.manyToOne};
    def manyToOneFields = modelData.columns.findAll{it.manyToOne};
    def oneToManyModels=modelHelper.getOneToMany(modelData.className,models);
%>package ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.model.value;

import java.io.Serializable;
import java.util.Date;
import java.util.List;

import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.map.annotate.JsonSerialize;

import ${config.project.packageName}.model.value.AbstractModelValueBean;
import ${config.project.packageName}.model.value.GroupFilterValue;
import ${config.project.packageName}.model.Model;
import ${config.project.packageName}.model.value.FilterValue;
import ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.model.${modelData.className};

@XmlRootElement(name = "${classRef}")
@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
public class ${modelData.className}Value extends AbstractModelValueBean{

	<% modelData.columns.each {  column -> %>
	private <%=modelHelper.getVariableType(column)%><%=(column.manyToOne)?"Value":""%>  <%=modelHelper.getVariableRef(column)%><%=(column.manyToOne)?"Value":""%>;
	<%}%><% oneToManyModels.each {  childModel -> %>
    private List<${childModel.className}Value> <%=modelHelper.getVariableRef(["name":childModel.className])%>ValueList;
	<%}%>
   
	@XmlTransient
	@JsonIgnore
	@Override
	public GroupFilterValue getBusinessKeys() {
		//TODO: frame the filter value
		return null;
	}

	public static enum ${modelData.className}Dataset implements Serializable {

		BUSINESS_KEY, ALL;

	}

	<% modelData.columns.each {  column -> %>
	
	public  <%=modelHelper.getVariableType(column)%><%=(column.manyToOne)?"Value":""%>  <%=modelHelper.getter(column)%><%=(column.manyToOne)?"Value":""%>() {
		return this.<%=modelHelper.getVariableRef(column)%><%=(column.manyToOne)?"Value":""%>;
	}
	
	public  void  <%=modelHelper.setter(column)%><%=(column.manyToOne)?"Value":""%>(<%=modelHelper.getVariableType(column)%><%=(column.manyToOne)?"Value":""%>  <%=modelHelper.getVariableRef(column)%><%=(column.manyToOne)?"Value":""%>) {
		this.<%=modelHelper.getVariableRef(column)%><%=(column.manyToOne)?"Value":""%>=<%=modelHelper.getVariableRef(column)%><%=(column.manyToOne)?"Value":""%>;
	}	
	<%}%><% oneToManyModels.each {  childModel -> %>
	protected  List<${childModel.className}Value>  get${childModel.className}ValueList() {
		return this.<%=modelHelper.getVariableRef(["name":childModel.className])%>ValueList;
	}
	
	protected  void  set${childModel.className}ValueList(List<${childModel.className}Value>  <%=modelHelper.getVariableRef(["name":childModel.className])%>ValueList) {
		this.<%=modelHelper.getVariableRef(["name":childModel.className])%>ValueList= <%=modelHelper.getVariableRef(["name":childModel.className])%>ValueList;
	}	
	<%}%>
	
	@Override
	public boolean equals(Object thatObj) {

		if (thatObj == null || getClass() != thatObj.getClass()) {
			return false;
		}

		final ${modelData.className}Value that = (${modelData.className}Value) thatObj;
		<% def pkforEquals = modelData.columns.findAll { column -> column.lpk  } %>
		return (<%=modelHelper.getequals(pkforEquals).join(" && ")%>);
	}

	@Override
	public int hashCode() {
		int hash = 17;
		<% def pks = modelData.columns.findAll { column -> column.lpk  } 
           pks.each { column ->%>
		hash = 31 * hash + <%=modelHelper.getHash(column)%>;
        <%}%>
		return hash;
	}

	
}
