<%
	def classRef = modelData.className[0].toLowerCase()+modelData.className[1..-1]
	
%>package ${config.project.packageName}.${modelData.subsystem}.model.value;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.criteria.*;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

import org.codehaus.jackson.annotate.JsonIgnore;
import org.codehaus.jackson.map.annotate.JsonSerialize;

import ${config.project.packageName}.model.value.AbstractModelValueBean;
import ${config.project.packageName}.model.Model;
import ${config.project.packageName}.${modelData.subsystem}.model.${modelData.className};

@XmlRootElement(name = "${classRef}Value")
@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)
public class ${modelData.className}Value extends AbstractModelValueBean{

	<% modelData.columns.each {  column -> %>
	private <%=modelHelper.getVariableType(column)%>  <%=modelHelper.getVariableRef(column)%>;
	<%}%>
	
	@XmlTransient
	@JsonIgnore
	@Override
	public Predicate getBusinessKey(CriteriaBuilder criteriaBuilder, Root<? extends Model> root) {
		return null;
	}

	public static enum ${modelData.className}Dataset implements Serializable {

		BUSINESS_KEY, ALL;

	}

	<% modelData.columns.each {  column -> %>
	
	public  <%=modelHelper.getVariableType(column)%>  <%=modelHelper.getter(column)%>() {
		return this.<%=modelHelper.getVariableRef(column)%>;
	}
	
	public  void  <%=modelHelper.setter(column)%>(<%=modelHelper.getVariableType(column)%>  <%=modelHelper.getVariableRef(column)%>) {
		this.<%=modelHelper.getVariableRef(column)%>=<%=modelHelper.getVariableRef(column)%>;
	}	
	<%}%>
	
	@Override
	public boolean equals(Object thatObj) {

		if (thatObj == null || getClass() != thatObj.getClass()) {
			return false;
		}

		final ${modelData.className}Value that = (${modelData.className}Value) thatObj;
		<% def pkforEquals = modelData.columns.findAll { column -> column.lpk  } %>
		return (<%=modelHelper.getequals(pkforEquals).join(" && ")%>);
	}

	@Override
	public int hashCode() {
		int hash = 17;
		<% def pks = modelData.columns.findAll { column -> column.lpk  } 
           pks.each { column ->%>
		hash = 31 * hash + <%=modelHelper.getHash(column)%>;
        <%}%>
		return hash;
	}

	
}
