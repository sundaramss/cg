<%
	def classRef = modelData.className[0].toLowerCase()+modelData.className[1..-1]
	
%>package ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.controller;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.controller.helper.${modelData.className}DataSetBuilder;
import ${config.project.packageName}.controller.helper.DataSetBuilder;
import ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.model.value.${modelData.className}Value;
import ${config.project.packageName}.controller.AbstractAppController; 
import ${config.project.packageName}.service.ServiceLocator; 
import ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.service.${modelData.className}Service; 

@Controller
@RequestMapping("/${modelData.className.toLowerCase()}")
public class ${modelData.className}Controller extends AbstractAppController<${modelData.className}Value> {

    protected ${modelData.className}Service getAppService() {
		return ServiceLocator.getInstance().get${modelData.className}Service();
 	}

	
	@Override
    protected DataSetBuilder getDataSetBuilder(String fieldSetName) {
		Enum<?> fieldSet = getFieldSet(fieldSetName);
        return new ${modelData.className}DataSetBuilder(fieldSet,new ${modelData.className}Value());
    }

    public ${modelData.className}Value.${modelData.className}Dataset getFieldSet(String fieldSet){

		if(StringUtils.isBlank(fieldSet)){
            return ${modelData.className}Value.${modelData.className}Dataset.BUSINESS_KEY;
        }
		
        try {
            return ${modelData.className}Value.${modelData.className}Dataset.valueOf(fieldSet);
        }catch (IllegalArgumentException ignore){
            return ${modelData.className}Value.${modelData.className}Dataset.BUSINESS_KEY;
        }
    }
	
}
