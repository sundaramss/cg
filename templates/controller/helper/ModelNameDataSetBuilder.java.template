<%
	def classRef = modelData.className[0].toLowerCase()+modelData.className[1..-1]
	
%>package ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.controller.helper;

import ${config.project.packageName}.controller.helper.DataSetBuilder;
import ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.model.${modelData.className}_;
import ${config.project.packageName}.model.value.FilterValue;
import org.apache.commons.beanutils.BeanUtils;

import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Set;

/**
 * Created by ${config.project.author}.
 */
public class ${modelData.className}DataSetBuilder extends DataSetBuilder {

    private static Map<String,FilterValue<?>> filterValueMap = new LinkedHashMap<String, FilterValue<?>>();

    private static Set<String> columnSet =new LinkedHashSet<String>();
    static {
		<% modelData.columns.each {  column -> %>
		 filterValueMap.put(${modelData.className}_.<%=modelHelper.getVariableRef(column)%>.getName(),new FilterValue<String>(${modelData.className}_.<%=modelHelper.getVariableRef(column)%>));
		<%}%>
		columnSet.add(${modelData.className}_.skGuid.getName());
		<% modelData.columns.each {  column -> %>
			columnSet.add(${modelData.className}_.<%=modelHelper.getVariableRef(column)%>.getName());
		<%}%>
    }


    public ${modelData.className}DataSetBuilder(Enum<?> fieldSet,Serializable bean) {
        super(fieldSet,bean);
    }

    @Override
	protected Map<String,FilterValue<?>> getFilterValueMap(){
		return filterValueMap;
	}
	    
    @Override
    protected boolean isColumnExist(String name) {
        return columnSet.contains(name);
    }
}
