<%
	def classRef = modelData.className[0].toLowerCase()+modelData.className[1..-1]
	def directFields = modelData.columns.findAll{!it.manyToOne};
    def manyToOneFields = modelData.columns.findAll{it.manyToOne};
    def oneToManyModels=modelHelper.getOneToMany(modelData.className,models);
%>package ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.model;

import java.util.Date;
import java.util.UUID;
<%if(oneToManyModels){%>import java.util.List;<%}%>

import javax.persistence.*;

import org.hibernate.annotations.Type;

import ${config.project.packageName}.model.AbstractModel;
import ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.model.value.${modelData.className}Value;
//import static ${config.project.packageName}.${modelData.subsystem.toLowerCase()}.model.value.${modelData.className}Value.${modelData.className}Dataset.*;
/**
 * 
 * @author ${config.project.author}
 * 
 */
@Entity
@Table(name = "${modelData.tableName}")
public class ${modelData.className} extends AbstractModel<${modelData.className}Value> {

	@Id
	//@GeneratedValue
	@Column(name = "${modelData.pk.colName}")
	private ${modelData.pk.type} skGuid;
	
	<% directFields.each {  column -> %>
	@Column(name = "${column.colName}" )
	@Type(type = "<%=modelHelper.getJavaType(column)%>")
	private <%=modelHelper.getVariableType(column)%>  <%=modelHelper.getVariableRef(column)%>;
	<%}%><%manyToOneFields.each {  column -> %>
    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="${column.colName}")
    private <%=modelHelper.getVariableType(column)%>  <%=modelHelper.getVariableRef(column)%>;
	<%}%><%oneToManyModels.each {  childModel -> %>
    @OneToMany(mappedBy="${childModel.className}",fetch=FetchType.LAZY)
    private List<${childModel.className}> <%=modelHelper.getVariableRef(["name":childModel.className])%>List;
	<%}%>
    
	<%if(modelData.recordLog){%>
	@Column(name = "created_date")
	@Type(type = "java.sql.Timestamp")
	@Temporal(javax.persistence.TemporalType.TIMESTAMP)
	private Date createdDate;

	@Column(name = "modified_date")
	@Type(type = "java.sql.Timestamp")
	@Temporal(javax.persistence.TemporalType.TIMESTAMP)
	private Date modifiedDate;

	@Column(name = "created_by")
	@Type(type = "java.lang.String")
	private String createdBy;

	@Column(name = "modified_by")
	@Type(type = "java.lang.String")
	private String modifiedBy;
	<%}%>

	private ${modelData.className}() {

	}

	public ${modelData.className}(${modelData.className}Value ${classRef}Value) {
		<%if(config.project.skGuidType=='String'){%>setSkGuid(UUID.randomUUID().toString());<%}%>
		saveValue(${classRef}Value);<%if(modelData.recordLog){%>
		setCreatedBy(${classRef}Value.getCreatedBy());
		setCreatedDate(new Date());<%}%>

	}
	<% modelData.columns.each {  column -> %>
	protected  <%=modelHelper.getVariableType(column)%>  <%=modelHelper.getter(column)%>() {
		return this.<%=modelHelper.getVariableRef(column)%>;
	}
	
	protected  void  <%=modelHelper.setter(column)%>(<%=modelHelper.getVariableType(column)%>  <%=modelHelper.getVariableRef(column)%>) {
		this.<%=modelHelper.getVariableRef(column)%>=<%=modelHelper.getVariableRef(column)%>;
	}	
	<%}%><% oneToManyModels.each {  childModel -> %>
	protected  List<${childModel.className}>  get${childModel.className}List() {
		return this.<%=modelHelper.getVariableRef(["name":childModel.className])%>List;
	}
	
	protected  void  set${childModel.className}List(List<${childModel.className}>  <%=modelHelper.getVariableRef(["name":childModel.className])%>List) {
		this.<%=modelHelper.getVariableRef(["name":childModel.className])%>List= <%=modelHelper.getVariableRef(["name":childModel.className])%>List;
	}	
	<%}%>

    protected ${modelData.pk.type} getSkGuid() {
		return skGuid;
	}

	protected void setSkGuid(${modelData.pk.type} skGuid) {
		this.skGuid = skGuid;
	}

	<%if(modelData.recordLog){%>
	protected Date getCreatedDate() {
		return createdDate;
	}

	protected void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	protected Date getModifiedDate() {
		return modifiedDate;
	}

	protected void setModifiedDate(Date modifiedDate) {
		this.modifiedDate = modifiedDate;
	}

	protected String getCreatedBy() {
		return createdBy;
	}

	protected void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}

	protected String getModifiedBy() {
		return modifiedBy;
	}

	protected void setModifiedBy(String modifiedBy) {
		this.modifiedBy = modifiedBy;
	}
	<%}%>
	

	@Override
	public void saveValue(${modelData.className}Value ${classRef}Value) {
		<%modelData.columns.findAll{!it.manyToOne}.each {  column -> %>this.<%=modelHelper.getVariableRef(column)%> = ${classRef}Value.<%=modelHelper.getter(column)%>();
		<%}%>
	}

	@Override
	public void updateValue(${modelData.className}Value ${classRef}Value) {
	    saveValue(${classRef}Value);<%if(modelData.recordLog){%>
		setModifiedBy(${classRef}Value.getModifiedBy());
		setModifiedDate(new Date());<%}%>
	}

	@Override
	public ${modelData.className}Value getValue() {

		${modelData.className}Value ${classRef}Value = new ${modelData.className}Value();
		${classRef}Value.setSkGuid(getSkGuid());
		populateAll(${classRef}Value);
		
		return ${classRef}Value;
	}


     public ${modelData.className}Value getBusinessKeyValue() {
		${modelData.className}Value  ${classRef}Value = new ${modelData.className}Value();
		${classRef}Value.setSkGuid(getSkGuid());
		populateBusinessKey(${classRef}Value);
		return  ${classRef}Value;
     }

	 @Override
     public ${modelData.className}Value populateValue(${modelData.className}Value ${classRef}Value, Enum dataset) {
		
		if(	${classRef}Value == null ){
			${classRef}Value = new ${modelData.className}Value();
		}	
		
		${classRef}Value.setSkGuid(getSkGuid());
		
		if(dataset == null ||  ${modelData.className}Value.${modelData.className}Dataset.class != dataset.getDeclaringClass()){
			return ${classRef}Value;
		}
		
		${modelData.className}Value.${modelData.className}Dataset myDataset = (${modelData.className}Value.${modelData.className}Dataset)dataset;
		
		switch(myDataset) {
			case ALL:
				populateAll(${classRef}Value); 
			break;	
			case BUSINESS_KEY:
			    populateBusinessKey(${classRef}Value);
			break;
			//User can define new dataset as per need
		}
		
		return ${classRef}Value; 
     }
     
     private void populateAll(${modelData.className}Value ${classRef}Value) {
         
        <% modelData.columns.findAll{!it.manyToOne}.each {  column -> %>	${classRef}Value.<%=modelHelper.setter(column)%>(this.<%=modelHelper.getVariableRef(column)%>);
        <%}%><% modelData.columns.findAll{it.manyToOne}.each {  column -> %>	${classRef}Value.<%=modelHelper.setter(column)%>Value(this.<%=modelHelper.getVariableRef(column)%>.getBusinessKeyValue());
        <%}%>

     }
     
     private void populateBusinessKey(${modelData.className}Value ${classRef}Value) {
		<% def pkColumns = modelData.columns.findAll { column -> column.lpk  } 
		pkColumns.each {  column -> %>
		${classRef}Value.<%=modelHelper.setter(column)%>(this.<%=modelHelper.getVariableRef(column)%>);
        <%}%>
     }

	@Override
	public boolean equals(Object thatObj) {

		if (thatObj == null) {
			return false;
		}

		if (getClass() != thatObj.getClass()) {
			return false;
		}

		final ${modelData.className} that = (${modelData.className}) thatObj;
		<% def pkforEquals = modelData.columns.findAll { column -> column.lpk  } %>
		return (<%=modelHelper.getequals(pkforEquals).join(" && ")%>);
	}

	@Override
	public int hashCode() {
		int hash = 17;
		<% def pks = modelData.columns.findAll { column -> column.lpk  } 
           pks.each { column ->%>
		hash = 31 * hash + <%=modelHelper.getHash(column)%>;
        <%}%>
		return hash;
	}
	
}
