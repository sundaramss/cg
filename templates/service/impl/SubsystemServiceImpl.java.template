package ${config.project.packageName}.${subsystem.toLowerCase()}.service.impl;
<% def subsystemName = subsystem[0].toUpperCase()+subsystem[1..-1] 
	modelData.each{ mData ->
%>
import ${config.project.packageName}.${subsystem.toLowerCase()}.model.${mData.className};
import ${config.project.packageName}.${subsystem.toLowerCase()}.model.${mData.className}Manager;
import ${config.project.packageName}.${subsystem.toLowerCase()}.model.value.${mData.className}Value;
import ${config.project.packageName}.${subsystem.toLowerCase()}.service.${subsystemName}Service;
<%}%>
import ${config.project.packageName}.exception.ApplicationException;
import ${config.project.packageName}.model.value.FilterValue;
import ${config.project.packageName}.model.value.SortOrderValue;
import ${config.project.packageName}.model.value.Page;

import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author  ${config.project.author}
 */
@Service("${subsystem}Service") 
public class ${subsystemName}ServiceImpl implements ${subsystemName}Service {
 
<%
	modelData.each{ mData ->
	def classRef = mData.className[0].toLowerCase()+mData.className[1..-1]
%>	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { ApplicationException.class })	
	public ${mData.className}Value create(${mData.className}Value ${classRef}Value) throws ApplicationException{
	
			${mData.className}Manager ${classRef}Manager = ${mData.className}Manager.getInstance();
			${mData.className}Value new${mData.className}Value = ${classRef}Manager.createModel(${classRef}Value);
			return new${mData.className}Value;
	}
	
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { ApplicationException.class })		
	public ${mData.className}Value update(${mData.className}Value ${classRef}Value) throws ApplicationException{

			${mData.className}Manager ${classRef}Manager = ${mData.className}Manager.getInstance();
			${mData.className} ${classRef} = ${classRef}Manager.lookupBySurrogateKey(${classRef}Value);
			if( ${classRef} != null ) {
				${classRef}.updateValue(${classRef}Value);
			}
			return ${classRef}Value;
	
	}
	
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, rollbackFor = { ApplicationException.class })		
	public void delete(${mData.className}Value ${classRef}Value) throws ApplicationException{
	
			${mData.className}Manager ${classRef}Manager = ${mData.className}Manager.getInstance();
			${classRef}Manager.delete(${classRef}Value);
	
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)	
	public ${mData.className}Value get${mData.className}Value(${mData.className}Value criteriaValue) throws ApplicationException {
		
			${mData.className}Value ${classRef}Value = get${mData.className}Value(criteriaValue,${mData.className}Value.${mData.className}Dataset.ALL);
			return ${classRef}Value;
			
	}
	
	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)	
	public ${mData.className}Value get${mData.className}Value(${mData.className}Value criteriaValue,Enum... dataset) throws ApplicationException {

			${mData.className}Manager ${classRef}Manager = ${mData.className}Manager.getInstance();
			${mData.className}Value ${classRef}Value = ${classRef}Manager.lookupValueByBusinessKey(criteriaValue,dataset);

			return ${classRef}Value;

	}
    
    
    @Override
    @Transactional(readOnly = true, propagation = Propagation.SUPPORTS)	
	public List<${mData.className}Value> get${mData.className}ValueList(Serializable criteriaValue,List<FilterValue> filterValueList,Enum... datasets) throws ApplicationException {
		
		${mData.className}Manager ${classRef}Manager = ${mData.className}Manager.getInstance();
		return ${classRef}Manager.lookupByCriteria(criteriaValue,filterValueList,datasets);
		
	}

	@Override
	@Transactional(readOnly = true, propagation = Propagation.SUPPORTS)	
	public Page<${mData.className}Value> get${mData.className}Values(Serializable criteriaValue,List<FilterValue> filterValueList, int pageNumber, int pageSize, List<SortOrderValue> sortOrderList,Enum... datasets) {
	
		${mData.className}Manager ${classRef}Manager = ${mData.className}Manager.getInstance();
		return ${classRef}Manager.lookupByCriteria(criteriaValue, pageNumber, pageSize, filterValueList, sortOrderList, datasets);
		
	}
<%}%>		
}
