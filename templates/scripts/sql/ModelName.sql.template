<%
	def fields=[]
	if(modelData.pk) {
		size=(modelData.pk.colSize)?"($modelData.pk.colSize)":""
		fields << "$modelData.pk.colName $modelData.pk.colType$size PRIMARY KEY"
	}
	def ukcols=[]
	modelData.columns.each{ column ->
		size = (column.colSize) ? "($column.colSize)" : ""
		fields << "$column.colName $column.colType$size"
		if(column.lpk){
			ukcols << column.colName
		}
	}
	if(modelData.recordLog) {
		fields << "created_by varchar(50)"
		fields << "modified_by varchar(50)"
		fields << "created_date timestamp"
		fields << "modified_date timestamp"
	}
    def manyToOneFields = modelData.columns.findAll{it.manyToOne};
    def manyToOneModels = modelHelper.getManyToOne(manyToOneFields,models);
%>

DROP TABLE IF EXISTS ${modelData.tableName};

CREATE TABLE ${modelData.tableName}(${fields.join(',')});

ALTER TABLE ${modelData.tableName} ADD CONSTRAINT UK_${modelData.tableName} UNIQUE (${ukcols.join(',')});
<%manyToOneFields.eachWithIndex{ field,idx ->%>
ALTER TABLE ${modelData.tableName} ADD CONSTRAINT FK_${modelData.className}_${manyToOneModels[idx].className} FOREIGN KEY  (${modelData.pk.colName}) REFERENCES ${manyToOneModels[idx].tableName} (${field.colName})
<%}%>