apply plugin: 'java'
apply plugin: 'war'

loadConfigFile();
loadData();

task "create-dirs" << {
    println "Create Java Base Layout"
	
	webAppDir.mkdirs();
	sourceSets*.java.srcDirs*.each { it.mkdirs() }    
	sourceSets*.resources.srcDirs*.each{ it.mkdirs() }
	
}

task "create-basepackage"(dependsOn: 'create-dirs') << {
	println "Create app Base package"
	
	def config = project.ext.config
	def mainJavaDir = sourceSets['main'].java.srcDirs.iterator()[0]
    def packageFolder= config.project.packageName.replaceAll('\\.',File.separator) 
	def  baseDir =  new File(mainJavaDir,packageFolder)
	baseDir.mkdirs()
	project.ext.baseDir=baseDir
	
    def appPackage = [	config.project.model,
						config.project.modelvalue.replaceAll('\\.',File.separator),
						config.project.controller,
						config.project.service,
						config.project.constant
					] 
    def subsystemPackages = config.project.subsystems.collect{ subsystem -> 
        [ subsystem+File.separator+config.project.model,
          subsystem+File.separator+config.project.modelvalue.replaceAll('\\.',File.separator),
          subsystem+File.separator+config.project.controller,
          subsystem+File.separator+config.project.service
        ]
    }
    	
    def packages = appPackage + subsystemPackages.flatten()				
	def packagesFiles= packages.collect { def f= new File(project.ext.baseDir,it); f.mkdirs(); f}  
	
}

task  "copy-base" (dependsOn: 'create-basepackage') << {
		println "Copy template base sources"
	
		def config = project.ext.config	
		def modelData = project.ext.modelData
		def resources = sourceSets['main'].resources.srcDirs.iterator()[0]
		
		def paths = [ 'constant':project.ext.baseDir.path + File.separator + config.project.constant,
					  'model': project.ext.baseDir.path + File.separator + config.project.model,
					  'modelvalue':project.ext.baseDir.path + File.separator + config.project.modelvalue.replaceAll('\\.',File.separator),
					  'service':project.ext.baseDir.path + File.separator + config.project.service,
					  'controller':project.ext.baseDir.path + File.separator + config.project.controller,
					  'webapps' : webAppDir.path,
					  'resources': resources.path
					 ]
					 
		paths.each {  template_path, srcPath ->
			copy {
				 from "templates/${template_path}"
				 into  srcPath
				 expand(project:project,config:config,modelData:modelData)
				 rename { String fileName ->
					fileName.replace('appname', "$config.project.name")
				 }
			}
		
		} 			   		
		
				
}

task cg(dependsOn: 'copy-base')  << {
	println "package:$config.project.packageName"
	
}


def loadConfigFile() {
	def softwareStack = hasProperty('env') ? env : 'spring_RESTful'
	def configFile = file('config.groovy')
	def config = new ConfigSlurper(softwareStack).parse(configFile.toURL())
	project.ext.config = config
}

def loadData() {
	def slurper = new groovy.json.JsonSlurper()
	tree = fileTree(dir: 'modeldata', include: '**/*.json')
	project.ext.modelData =  tree.collect { File file ->  slurper.parseText(file.text)}
}
