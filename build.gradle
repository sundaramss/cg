apply plugin: 'java'
apply plugin: 'war'

loadConfigFile();
loadData();
def getTemplateName() {
	'templates'
}
task "create-dirs" << {
    println "Create Java Base Layout"

    def app = project.ext.config.project.name
    def currentDir = new java.io.File(System.getProperty("user.dir"));
    java.io.File appDir = new java.io.File(currentDir.parent,app);
	appDir.mkdirs();
    def indexPath=currentDir.path.size()+1

	def appWebDir = new java.io.File(appDir,webAppDir.path.substring(indexPath));
	appWebDir.mkdirs();

    project.ext.appDir=appDir;
	project.ext.appWebDir=appWebDir;

    def srcDirs=[]; 

	sourceSets*.java.srcDirs*.each { 
	   def srcDir=new java.io.File(appDir,it.path.substring(indexPath));
	   srcDir.mkdir();
	   srcDirs << srcDir
	}    
    project.ext.srcDirs=srcDirs;

    def resourcesDirs=[];
	sourceSets*.resources.srcDirs*.each{
		resourcesDir = new java.io.File(appDir,it.path.substring(indexPath));
		resourcesDir.mkdirs();
		resourcesDirs << resourcesDir
	}
    project.ext.resourcesDirs = resourcesDirs;
   
}

task "create-basepackage"(dependsOn: 'create-dirs') << {
	println "Create app Base package"
	
	def config = project.ext.config
	def mainJavaDir = project.ext.srcDirs[0] 
	def packageFolder= config.project.packageName.replaceAll('\\.',"/") 
	
	def  baseDir =  new File(mainJavaDir,packageFolder)
	baseDir.mkdirs()
	project.ext.baseDir=baseDir
	
}

task  "copy-base" (dependsOn: 'create-basepackage') << {
		println "Copy template base sources"
	
		def config = project.ext.config	
		def modelHelper = new ModelHelper()
		def modelData = project.ext.modelData
		def resources = project.ext.resourcesDirs[0]
		
		def paths = [ 'constant':project.ext.baseDir.path + File.separator + config.project.constant,
					  'model': project.ext.baseDir.path + File.separator + config.project.model,
					  'modelvalue':project.ext.baseDir.path + File.separator + config.project.modelvalue.replaceAll('\\.',"/"),
					  'service':project.ext.baseDir.path + File.separator + config.project.service,
					  'controller':project.ext.baseDir.path + File.separator + config.project.controller,
					  'exception':project.ext.baseDir.path + File.separator + config.project.exception,
					  'build':project.ext.appDir.path,
					  'webapps' : project.ext.appWebDir.path,
					  'resources': resources.path
					 ]
					 
		paths.each {  template_path, srcPath ->
			copy {
				 from "${getTemplateName()}/${template_path}"
				 into  srcPath
				 expand(project:project,config:config,modelData:modelData,modelHelper:modelHelper)
				 rename { String fileName ->
					fileName.replace('appname', "$config.project.name")
				 }
				 exclude "**/*.template"
			}
		
		} 			   		
}


task cg(dependsOn: 'copy-base')  << {
	
	println "Code Generate" 
	
	def config = project.ext.config	
	def modelHelper = new ModelHelper()
	
	def pathMap = [ 
						[
							from:"${getTemplateName()}/model",
							subsystemModelPackage: project.ext.baseDir.path + File.separator + '%s' + File.separator + config.project.model,
						    renameSrc:"ModelName(.+)\\.template",
						    include:'**/ModelName*.template'
						],
						[
							from:"${getTemplateName()}/modelvalue",
							subsystemModelPackage:project.ext.baseDir.path + File.separator + '%s' + File.separator + 'model/value',
							renameSrc:"ModelName(.+)\\.template",
							include:"**/ModelName*.template"
						],
						[
							from:"${getTemplateName()}/service",
							subsystemModelPackage:project.ext.baseDir.path + File.separator + '%s' + File.separator + 'service',
							renameSrc:"ModelName(.+)\\.template",
							include:"**/ModelNameService*.template"
						],
						[
							from:"${getTemplateName()}/controller",
							subsystemModelPackage:project.ext.baseDir.path + File.separator + '%s' + File.separator + 'controller',
							renameSrc:"ModelName(.+)\\.template",
							include:"**/ModelName*.template"
						],
						[
							from:"${getTemplateName()}/scripts/sql",
							subsystemModelPackage:project.appDir.path + File.separator + 'scripts' + File.separator + 'sql',
							renameSrc:"ModelName(.+)\\.template",
							include:"**/ModelName.sql.template"
						],
						[
							from:"${getTemplateName()}/scripts/curl",
							subsystemModelPackage:project.appDir.path + File.separator + 'scripts' + File.separator + 'curl',
							renameSrc:"ModelName(.+)\\.template",
							include:"**/ModelName.curl.template"
						]
				  ];

	pathMap.each { map ->
			project.ext.modelData.each { modelData ->
				  def rName = modelData.className+'$1'	
				  def subsystemModelPackage = String.format(map.subsystemModelPackage,modelData.subsystem.toLowerCase())
				  copy {
					  from map.from
					  into subsystemModelPackage
					  expand(project:project,config:config,modelData:modelData,modelHelper:modelHelper,models:project.ext.modelData)
					  rename { String fileName ->
							fileName.replaceAll(map.renameSrc,rName)
					  }
					  include map.include
				  }	
			}
	}	
	
	config.project.subsystems.each {  subsystem ->
		
		def modelData = project.ext.modelData.findAll { it.subsystem == subsystem }
		def subsystemName = subsystem[0].toUpperCase()+subsystem[1..-1]
				
		def subsystemModelPackage =  project.ext.baseDir.path + File.separator + subsystem.toLowerCase() + File.separator + 'service'
		
		copy {
		  from "templates/service"
		  into subsystemModelPackage
		  expand(project:project,config:config,modelData:modelData,subsystem:subsystem,modelHelper:modelHelper)
		  def rName = subsystemName+'$1'
		  rename { String fileName ->
			fileName.replaceAll("Subsystem(.+)\\.template",rName)
		  }
		  include "**/SubsystemService*.template"
		}
			
	}
}


def loadConfigFile() {
	def softwareStack = hasProperty('env') ? env : 'spring_RESTful'
	def configFile = file('config.groovy')
	def config = new ConfigSlurper(softwareStack).parse(configFile.toURL())
	project.ext.config = config
}

def loadData() {
	def slurper = new groovy.json.JsonSlurper()
	tree = fileTree(dir: 'modeldata', include: '**/*.json')
	project.ext.modelData =  tree.collect { File file ->  slurper.parseText(file.text)}
}

class ModelHelper {
	
	def premitives = ['int','long','float','double']
	def ignorePackage = [
		'java.lang.String','String',
		'java.lang.Boolean','boolean','Boolean',
		'java.lang.Double','double','Double',
		'java.lang.Float','float','Float',
		'java.lang.Integer','int','Integer',
		'java.lang.Long','long',Long,
		'java.util.Date','Date'
	]
	
	def sqljavatypes = [ 
		'string':'java.lang.String',
		'integer':'java.lang.Integer',
		'int':'java.lang.Integer',
		'long':'java.lang.Long',
		'double':'java.lang.Double',
		'date': 'java.sql.Timestamp',
		'boolean': 'java.lang.Boolean'
	]	
	
	
	def importPackage(columns){
		colTypes = columns.collect { it.type }
		colTypes - ignorePackage
	}
	
	def getJavaType(column) {
		def type = column.type.split('\\.')[-1].toLowerCase()
		sqljavatypes[type]
	}
	def getVariableType(column){
		def colType = column.type.split('\\.')[-1]
		colType
	}
	def getVariableTypeForValueBean(column){
		def colType = column.type.split('\\.')[-1]
		if(sqljavatypes[colType.toLowerCase()] == null){
			colType = colType + "Value"
		}
		colType
	}
	def getterForValueBean(column){
		def typeName = getVariableTypeForValueBean(column)
		def prefix = (typeName.toLowerCase() == 'boolean') ? 'is' : 'get'
		def property = column.name[0].toUpperCase()+column.name[1..-1]
		attachedValueRequired(column,"$prefix$property")
	}
	
	def getter(column){
		def typeName = getVariableType(column)
		def prefix = (typeName.toLowerCase() == 'boolean') ? 'is' : 'get'
		def property = column.name[0].toUpperCase()+column.name[1..-1]
		"$prefix$property"
	}
	
	def setter(column){
		def property = column.name[0].toUpperCase()+column.name[1..-1]
		"set$property"
	}

	
	def setterForValueBean(column){
		def property = column.name[0].toUpperCase()+column.name[1..-1]
		attachedValueRequired(column,"set$property");
	}
	def attachedValueRequired(column,value) {
		def colType = column.type.split('\\.')[-1]
		if(sqljavatypes[colType.toLowerCase()] == null){
		   value += "Value"
		}
		value
	}
	def getTypeName(column) {
		def type = column.type.split('\\.')[-1]
		def typeName = type[0].toUpperCase()+type[1..-1]
	}
	
	def getVariableRef(column){
		column.name[0].toLowerCase()+column.name[1..-1]
	}

	def getVariableRefForValueBean(column){
		def value = column.name[0].toLowerCase()+column.name[1..-1]
		attachedValueRequired(column,value)
	}

	def getequals(columns) {
		def pks = []
		columns.each { column ->
		    if ( column.name in premitives ) {
			  pks <<  "this.${column.name} == that.${column.name}"
			}else {
			  pks << "this.${column.name}.equals(that.${column.name})"
			}
		}
		return pks
	}

	def prepareJson(map){
        def builder = new groovy.json.JsonBuilder()	
		builder(map)
		return builder.toString()
	}
	
	def getHash(column) {

	    def indexOf = column.type.indexOf('.')
	    def casting = ""
		def hash = ""
	    if(indexOf == 0 ) {
	       casting = (column.type in premitives) ? "(int)" : "" 
	    } else {
			hash = ".hashCode()"
	    }
	    
		return "${casting} this.${column.name}${hash}"
	    
	}
    def getOneToMany(className,models){
        def childModels = [];
        models.each{ model ->
            
            def cols = model.columns.collect{  if(it.manyToOne){ it.type} }.findAll{it};
            if( cols.contains(className)){
                childModels << model
            }
              
        }
        return childModels;
    }
    def getManyToOne(fields,models){
        def classNames = fields*.type;
        if(classNames.size() == 0) return [];
        def parentModels = []
        models.each{ model ->
            if( classNames.contains(model.className) ){
                parentModels << model;  
            }
        }
        return parentModels;
    }
    def getDefaultValueForType(type){
        def value = null;
        if(type in premitives){
            switch(type){
                case 'int':
                    value='0';
                    break;
                case 'long':
                    value='0L';
                    break;
                case 'float':
                    value='0.0f';
                    break;
                case 'long':
                    value='0.0D';
                    break;
            }
        }
        return value;
    }
}
